USE DBJobSwapSystem

GO

CREATE PROCEDURE sp_GetUserPasswordByID
    @UserID INT,
    @Password NVARCHAR(20) OUTPUT
AS
BEGIN
    SET NOCOUNT ON;

    SELECT @Password = fldPassword
    FROM tblUser
    WHERE fldUserID = @UserID;
END;

GO

CREATE PROCEDURE GetUserID(@Username NVARCHAR(255))
AS
    BEGIN
        SELECT fldUserID 
        FROM tblUser
        WHERE fldUserName = @Username;
    END

GO

USE DBJobSwapSystem

GO

CREATE PROCEDURE GetCompanyID (@CompanyName NVARCHAR(255))
AS
    BEGIN
        SELECT fldCompanyID
        FROM tblCompany
        WHERE fldCompanyName = @CompanyName
    END

GO

CREATE PROCEDURE spCreateProfile
    @FullName NVARCHAR(255),
    @JobTitle NVARCHAR(255),
    @HomeAddress NVARCHAR(255),
    @CompanyID INT,
    @Wage INT,
    @PayPref INT,
    @DistPref NVARCHAR(255),
    @UserID INT
AS
BEGIN
    INSERT INTO tblProfile (
        fldFullName,
        fldJobTitle,
        fldHomeAddress,
        fldCompanyID,
        fldWage,
        fldPayPref,
        fldDistPref,
        fldUserID
    )
    VALUES (
        @FullName,
        @JobTitle,
        @HomeAddress,
        @CompanyID,
        @Wage,
        @PayPref,
        @DistPref,
        @UserID
    );
END;

GO

CREATE PROCEDURE NewUser (@UserName NVARCHAR(20), @Password NVARCHAR(20))
AS
    BEGIN
        INSERT INTO tblUser(fldUserName, fldPassword)
        VALUES (@UserName, @Password)
    END

GO

use DBJobSwapSystem

GO

create procedure ReadMatchByID (@matchID int)
as
    begin
        Select * 
        from tblMatches 
        where fldMatchID = @matchID
    end

GO

create procedure SaveSwapRequest (@matchID int, @profileAID int, @profileBID int, @stateID int, @matchDate date, @matchresponseDate date)
as
    begin
        Insert into tblMatches(fldMatchID, fldProfileAID, fldProfileBID, fldStateID, fldMatchDate, fldMatchResponseDate) 
        values(@matchID, @profileAID, @profileBID, @stateID, @matchDate, @matchresponseDate)
    end

GO

create procedure DeclineMatchByID (@matchID int)
    as
        begin
            Update tblMatches 
            set fldStateID = 4 
            where fldMatchID = @matchID
        end

GO

CREATE PROCEDURE CheckPassword
    @fldUserName VARCHAR(20),
    @fldPassword varchar(20)
AS
BEGIN

SET NOCOUNT ON

IF EXISTS(SELECT * FROM tblUser WHERE fldUserName = @fldUserName AND fldPassword = @fldPassword)
    SELECT 'true' AS UserExists
ELSE
    SELECT 'false' AS UserExists

END

GO

CREATE PROCEDURE UpdateSwappingStatus
    @ProfileID INT,
    @SwappingStatus BIT
AS
BEGIN
    -- Update the swapping status for the specified profile
    UPDATE tblProfile
    SET fldSwappingStatus = @SwappingStatus
    WHERE fldProfileID = @ProfileID;

    -- Return a success message
    SELECT 'Swapping status updated successfully.' AS Result;
END;

GO

CREATE PROCEDURE InsertMatch
    @ProfileAID INT,
    @ProfileBID INT,
    @StateID INT,
    @MatchDate DATE,
    @MatchResponseDate DATE,
    @RequestResponseDate DATE,
    @SwapResponseDate DATE
AS
BEGIN
    -- Insert a new match record into tblMatches
    INSERT INTO tblMatches (
        fldProfileAID,
        fldProfileBID,
        fldStateID,
        fldMatchDate,
        fldMatchResponseDate,
        fldRequestResponseDate,
        fldSwapResponseDate
    )
    VALUES (
        @ProfileAID,
        @ProfileBID,
        @StateID,
        @MatchDate,
        @MatchResponseDate,
        @RequestResponseDate,
        @SwapResponseDate
    );

    -- Return the newly created MatchID
    SELECT SCOPE_IDENTITY() AS NewMatchID;
END;

GO

CREATE PROCEDURE DeleteProfile
    @ProfileID INT
AS
BEGIN
    -- Delete related records in tblMatches
    DELETE FROM tblMatches
    WHERE fldProfileAID = @ProfileID OR fldProfileBID = @ProfileID;

    -- Delete the profile from tblProfile
    DELETE FROM tblProfile
    WHERE fldProfileID = @ProfileID;

    -- Return a success message
    SELECT 'Profile and related matches deleted successfully.' AS Result;
END;

GO

CREATE PROCEDURE ReadProfileByID
    @ProfileID INT
AS
BEGIN
    -- Select profile based on the provided ProfileID
    SELECT
        p.fldFullName,
        p.fldJobTitle,
        p.fldHomeAddress,
        c.fldCompanyName,
        p.fldWage,
        p.fldPayPref,
        p.fldDistPref,
        p.fldAbout,
        p.fldSwappingStatus,
        jf.fldFunction
    FROM
        tblProfile p
    JOIN
        tblCompany c ON p.fldCompanyID = c.fldCompanyID
    JOIN
        tblProfileJobFunction pjf ON p.fldProfileID = pjf.fldProfileID
    JOIN
        tblJobFunction jf ON pjf.fldJobFunctionID = jf.fldJobFunctionID
    WHERE
        p.fldProfileID = @ProfileID;
END;

GO

CREATE PROCEDURE UpdateMatch
    @MatchID INT,
    @StateID INT = NULL,
    @MatchResponseDate DATE = NULL,
    @RequestResponseDate DATE = NULL,
    @SwapResponseDate DATE = NULL
AS
BEGIN
    -- Update the match record in tblMatches
    UPDATE tblMatches
    SET
        fldStateID = ISNULL(@StateID, fldStateID),
        fldMatchResponseDate = ISNULL(@MatchResponseDate, fldMatchResponseDate),
        fldRequestResponseDate = ISNULL(@RequestResponseDate, fldRequestResponseDate),
        fldSwapResponseDate = ISNULL(@SwapResponseDate, fldSwapResponseDate)
    WHERE
        fldMatchID = @MatchID;

    -- Return a success message
    SELECT 'Match updated successfully.' AS Result;
END;

GO

CREATE PROCEDURE spUpdateProfile
    @ProfileID INT,
    @FullName NVARCHAR(255),
    @JobTitle NVARCHAR(255),
    @HomeAddress NVARCHAR(255),
    @CompanyID INT,
    @Wage INT,
    @PayPref INT,
    @DistPref NVARCHAR(255),
    @About NVARCHAR(255),
    @UserID INT
AS
BEGIN
    UPDATE tblProfile
    SET
        fldFullName = @FullName,
        fldJobTitle = @JobTitle,
        fldHomeAddress = @HomeAddress,
        fldCompanyID = @CompanyID,
        fldWage = @Wage,
        fldPayPref = @PayPref,
        fldDistPref = @DistPref,
        fldAbout = @About,
        fldUserID = @UserID
    WHERE fldProfileID = @ProfileID;
END;

GO

CREATE PROCEDURE GetTwoNewestMatches
AS
BEGIN
    SET NOCOUNT ON;

    SELECT TOP 2 *
    FROM tblMatches
    ORDER BY fldMatchDate DESC;
END;

GO

CREATE PROCEDURE GetTwoNewestRequest
AS
BEGIN
    SET NOCOUNT ON;

    SELECT TOP 2 *
    FROM tblMatches
    ORDER BY fldMatchResponseDate DESC;
END;

GO

CREATE PROC UserNameUniqueness(@name varchar(20))

AS

    BEGIN
        IF EXISTS (SELECT fldUserName FROM tblUser WHERE fldUserName = @name)
            SELECT 'true' AS USERNAMEEXISTS
        ELSE
            SELECT 'false' AS USERNAMEEXISTS

    END

GO

CREATE PROCEDURE GetJobTitleByProfileID
    @ProfileID INT
AS
BEGIN
    SELECT fldJobTitle
    FROM tblProfile
    WHERE fldProfileID = @ProfileID
END;

GO

alter procedure SaveSwapRequest (@matchID int, @profileAID int, @profileBID int, @matchDate date, @matchresponseDate date)
as
    BEGIN
        Insert into tblMatches(fldMatchID, fldProfileAID, fldProfileBID, fldStateID, fldMatchDate, fldMatchResponseDate) 
        values(@matchID, @profileAID, @profileBID, 2, @matchDate, @matchresponseDate)
    END

GO

USE DBJobSwapSystem

GO

CREATE PROCEDURE UpdateSwappingStatus 
                (@ProfileID INT,
                @SwappingStatus BIT)
AS
    BEGIN
        UPDATE tblProfile
        SET fldSwappingStatus = @SwappingStatus
        WHERE fldProfileID = @ProfileID
    END

GO

CREATE PROCEDURE GetTwoNewestMatchesByProfileID
    @ProfileID INT
AS
BEGIN
    SELECT TOP 2 *
    FROM tblMatches
    WHERE fldProfileAID = @ProfileID OR fldProfileBID = @ProfileID
    ORDER BY fldMatchDate DESC;
END;

GO

CREATE PROC spReadAllJobFunctions

AS
    BEGIN
        SELECT fldFunction FROM tblJobFunction
    END

GO

CREATE PROCEDURE GetTwoNewestRequestsByProfileID
    @ProfileID INT
AS
BEGIN
    SET NOCOUNT ON;

    SELECT TOP 2 *
    FROM tblMatches
    WHERE fldProfileBID = @ProfileID AND fldStateID = 1 -- waiting requests
    ORDER BY fldMatchResponseDate DESC;
END;

GO

CREATE PROCEDURE UserNameUniqueness (@name VARCHAR(20))

AS

    BEGIN
        IF EXISTS (SELECT fldUserName FROM tblUser WHERE fldUserName = @name)
            SELECT 'false' AS USERNAMEEXISTS
        ELSE
            SELECT 'true' AS USERNAMEEXISTS

    END

GO

CREATE PROCEDURE spUpdatePassword
    @UserID INT,
    @NewPassword NVARCHAR(20)
AS
BEGIN
    SET NOCOUNT ON;

    UPDATE tblUser
    SET fldPassword = @NewPassword
    WHERE fldUserID = @UserID;

    END;

GO

CREATE PROCEDURE spReadAllCompanies
AS
    BEGIN
        SELECT * FROM tblCompany
    END

GO

CREATE PROCEDURE GetProfileID @UserID INT
AS
    BEGIN
        SELECT fldProfileID
        FROM tblProfile
        WHERE fldUserID = @UserID
    END